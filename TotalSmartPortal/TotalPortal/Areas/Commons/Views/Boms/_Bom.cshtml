@using TotalBase.Enums;
@using TotalPortal.Configuration

@model TotalPortal.Areas.Commons.ViewModels.BomViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopB.cshtml")

    @Html.HiddenFor(model => model.BomID)

    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")


        <div class="form-group">
            @Html.LabelFor(model => model.Code)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => model.Code).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => model.Name).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EffectiveDate)
            <div class="div-input">
                @Html.Kendo().DateTimePickerFor(model => model.EffectiveDate).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.EffectiveDate, "", new { @class = "text-danger" })
            </div>
        </div>

    </div>

    <div class="right-panel">

        <div class="right-top-panel right-top-panel-H3">
            @Html.EditorFor(d => d.Customer, new { CustomerDescriptionHidden = "true", CustomerDisplayName = @Model.GetDisplayName(m => m.Customer) })
            @Html.EditorFor(d => d.Commodity, new { CommodityDescriptionHidden = "true", CommodityDisplayName = @Model.GetDisplayName(m => m.Commodity) })
        </div>


        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.BomViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.BomDetailID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= BomDetailID #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].BomDetailID' value='#= BomDetailID #' />");
                    columns.Bound(p => p.BomID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= BomID #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].BomID' value='#= BomID #' />");


                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Filterable(false).Width(118)                        
                        .ClientTemplate("<div> #= CommodityCode #</div>" + "<input type='hidden' name='BomViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />");

                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Filterable(false).Width(260).HtmlAttributes(new { style = "" })
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />")
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)");
                  
                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");


                    columns.Bound(p => p.Quantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(70)
                        .Format(Settings.kfmQuantity)                        
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />")
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #");
                    columns.Bound(p => p.BlockQuantity).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(60)
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', BlockQuantity) #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].BlockQuantity' value='#= BlockQuantity #' />")
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #");
                    columns.Bound(p => p.BlockUnit).DisplayNameTitle().Filterable(false).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(60)
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', BlockUnit) #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].BlockUnit' value='#= BlockUnit #' />")
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #");


                    columns.Bound(p => p.Remarks).DisplayNameTitle().Filterable(false).Width(227)
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='BomViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");


                    columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(10).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });
                })
                    .Filterable()
                    .Navigatable()

                    .ToolBar(toolbar =>
                    {
                        if (Model.Editable)
                        {
                            toolbar.Template(@<text>
                                <button type="button" class="k-button" onclick="$('#kendoGridDetails').data('kendoGrid').addRow()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Thêm mặt hàng </button>

                                @if (Model.Editable)
                                {
                                    <span style="float:right">
                                        @Html.Partial("~/Views/Helpers/Commons/_Import.cshtml")
                                    </span>
                                }

                            </text>);
                        }
                        else
                        {
                            toolbar.Template(@<text> @Commons.Toolbars.BlankToolbar() </text>);
                        }
                                })

                        .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                        .Selectable(settings =>
                        {
                        settings.Mode(GridSelectionMode.Multiple);
                        settings.Type(GridSelectionType.Row);
                        })
                        .DataSource(dataSource => dataSource
                        .Ajax()
                        .Batch(true)
                        .ServerOperation(false)
                        .Model(model =>
                        {
                            model.Id(x => x.BomDetailID);
                            model.Field(m => m.BomDetailID).DefaultValue(0);
                            model.Field(m => m.BomID).DefaultValue(@Model.BomID);
                        })
                        .Events(events =>
                        {
                            events.Change("dataSourceChange");
                            events.Error("kendGrid_ErrorHandler");
                        })
                        .Aggregates(a => a.Add(x => x.CommodityName).Count())
                        .Aggregates(a => a.Add(x => x.Quantity).Sum())
                        .Aggregates(a => a.Add(x => x.BlockQuantity).Sum())
                        .Aggregates(a => a.Add(x => x.BlockUnit).Sum())
                        )
            )
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            @*<div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>*@

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>


        <div class="right-botton-panel">

            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "Boms")"> <img src="~/Content/Images/New/save-32-m20.png" /> Lưu </button>
            }

            @if (Model.BomID > 0 && !Model.Approvable && !Model.UnApprovable)
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", "Boms", new {id = @Model.BomID })'"> <img src="~/Content/Images/Mains/@(!@Model.Approved ? "Check-32-CHY.png" : "cloud-32-NoCheck.png")" /> @(!Model.Approved ? "Duyệt" : "Hủy duyệt") </button>
            }

        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")




    </div>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>
<script src="@Url.Content("~/Scripts/Controllers/Purchases/Boms/Import.js")"></script>

<script type="text/javascript">
    dataSourceChange = function (e) {
        if (e.field === "Quantity") {
            var dataRow = e.items[0];
            dataRow.set("QuantityRemains", DoRound(dataRow.Quantity - dataRow.QuantityArrived, requireConfig.websiteOptions.rndQuantity));
        }
    }

    window.urlCommoditiesApi = '@Url.Action("GetCommodityBasesImport", "CommodityAPIs", new { area = "Commons" })';
</script>

