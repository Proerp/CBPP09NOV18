@using TotalBase.Enums;
@using TotalPortal.Configuration

@model TotalPortal.Areas.Inventories.ViewModels.PackageIssueViewModel

<div id="popupWindow"></div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopB.cshtml")

    @Html.Hidden("WarehouseTaskID", (int)@ViewBag.WarehouseTaskID);
    @Html.Hidden("WarehouseTaskIDList", (string)@ViewBag.WarehouseTaskIDList);

    @Html.HiddenFor(model => model.PackageIssueID)

    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")

        @Html.HiddenFor(model => model.BlendingInstructionID)

        @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Shift.cshtml")

        <div class="form-group SBT-Hidden">
            @Html.EditorFor(d => d.ProductionLine)
        </div>

        <div class="SBT-Hidden">
            @Html.EditorFor(d => d.Warehouse, new { WarehouseDisplayName = @Model.GetDisplayName(m => m.Warehouse) })
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.BlendingInstructionReference)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => model.BlendingInstructionReference).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.BlendingInstructionReference, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BlendingInstructionCode)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => model.BlendingInstructionCode).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.BlendingInstructionCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BlendingInstructionEntryDate)
            <div class="div-input">
                @Html.Kendo().DateTimePickerFor(model => model.BlendingInstructionEntryDate).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.BlendingInstructionEntryDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group SBT-Hidden">
            @Html.EditorFor(d => d.CrucialWorker, new { EmployeeDisplayName = @Model.GetDisplayName(m => m.CrucialWorker) })
        </div>
        <div class="form-group SBT-Hidden">
            @Html.EditorFor(d => d.Storekeeper, new { EmployeeDisplayName = @Model.GetDisplayName(m => m.Storekeeper) })
        </div>
    </div>

    <div class="right-panel">

        <div class="right-top-panel right-top-panel-H3">
            @Html.EditorFor(d => d.Commodity, new { CommodityDescriptionHidden = "false", CommodityDisplayCode = @Model.GetDisplayName(m => m.Commodity) })
        </div>


        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.PackageIssueViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.PackageIssueDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= PackageIssueDetailID #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].PackageIssueDetailID' value='#= PackageIssueDetailID #' />");
                    columns.Bound(p => p.PackageIssueID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= PackageIssueID #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].PackageIssueID' value='#= PackageIssueID #' />");


                    columns.Bound(p => p.BlendingInstructionDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (BlendingInstructionDetailID == null)? '' : BlendingInstructionDetailID #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].BlendingInstructionDetailID' value='#= (BlendingInstructionDetailID == null) ? '' : BlendingInstructionDetailID #' />");


                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(200)
                        .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />")
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)");
                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(280).HtmlAttributes(new { style = "" })
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");

                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");



                    columns.Bound(p => p.GoodsReceiptID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (GoodsReceiptID == null)? '' : GoodsReceiptID #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].GoodsReceiptID' value='#= (GoodsReceiptID == null) ? '' : GoodsReceiptID #' />");
                    columns.Bound(p => p.GoodsReceiptDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (GoodsReceiptDetailID == null)? '' : GoodsReceiptDetailID #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].GoodsReceiptDetailID' value='#= (GoodsReceiptDetailID == null) ? '' : GoodsReceiptDetailID #' />");

                    columns.Bound(p => p.GoodsReceiptCode).DisplayNameTitle().Width(60).Hidden()
                        .ClientTemplate("#= (GoodsReceiptCode == null)? '' : GoodsReceiptCode #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].GoodsReceiptCode' value='#= (GoodsReceiptCode == null) ? '' : GoodsReceiptCode #' />");
                    columns.Bound(p => p.GoodsReceiptReference).DisplayNameTitle().Width(60)
                        .ClientTemplate("#= (GoodsReceiptReference == null)? '' : GoodsReceiptReference #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].GoodsReceiptReference' value='#= (GoodsReceiptReference == null) ? '' : GoodsReceiptReference #' />");
                    columns.Bound(p => p.GoodsReceiptEntryDate).DisplayNameTitle().Width(80)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (GoodsReceiptEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', GoodsReceiptEntryDate) #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].GoodsReceiptEntryDate' value='#= (GoodsReceiptEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', GoodsReceiptEntryDate) #' />");

                    columns.Bound(p => p.BatchID).DisplayNameTitle().Filterable(false).Hidden()
                        .ClientTemplate("#= BatchID #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].BatchID' value='#= BatchID #' />");
                    columns.Bound(p => p.BatchEntryDate).DisplayNameTitle().Filterable(false).Width(80)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (BatchEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', BatchEntryDate) #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].BatchEntryDate' value='#= (BatchEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', BatchEntryDate) #' />");
                    columns.Bound(p => p.BatchCode).DisplayNameTitle().Width(20)
                        .ClientTemplate("#= (BatchCode == null)? '' : BatchCode #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].BatchCode' value='#= (BatchCode == null) ? '' : BatchCode #' />");

                    columns.Bound(p => p.Barcode).DisplayNameTitle().Width(20)
                        .ClientTemplate("#= (Barcode == null)? '' : Barcode #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].Barcode' value='#= (Barcode == null) ? '' : Barcode #' />");
                    columns.Bound(p => p.SealCode).DisplayNameTitle().Width(20).Hidden(true)
                        .ClientTemplate("#= (SealCode == null)? '' : SealCode #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].SealCode' value='#= (SealCode == null) ? '' : SealCode #' />");
                    columns.Bound(p => p.LabCode).DisplayNameTitle().Width(20).Hidden(true)
                        .ClientTemplate("#= (LabCode == null)? '' : LabCode #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].LabCode' value='#= (LabCode == null) ? '' : LabCode #' />");

                    columns.Bound(p => p.BinLocationID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= BinLocationID #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].BinLocationID' value='#= BinLocationID #' />");
                    columns.Bound(p => p.BinLocationCode).DisplayNameTitle().Width(68)
                        .ClientTemplate("#= (BinLocationCode == null)? '' : BinLocationCode #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].BinLocationCode' value='#= (BinLocationCode == null) ? '' : BinLocationCode #' />");

                    columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityRemains) #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");
                    
                    columns.Bound(p => p.QuantityAvailables).DisplayNameTitle().Width(50).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityAvailables) #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].QuantityAvailables' value='#= QuantityAvailables #' />");

                    columns.Bound(p => p.Quantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(50)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");



                    columns.Bound(p => p.Remarks).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (Remarks == null)? '' : Remarks #" + "<input type='hidden' name='PackageIssueViewDetails[#= index(data) #].Remarks' value='#= (Remarks == null) ? '' : Remarks #' />");


                    columns.Command(command => { command.Destroy().Text("<span class='command' ></span>"); }).Width(50).Hidden(!@Model.Editable).HtmlAttributes(new { @class = "grid-column-center" });

                    columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(50).Hidden(!@Model.Voidable && !@Model.UnVoidable)
                        .ClientTemplate("<a class='k-button' style='padding-left:0px; padding-right:0px' onclick='callVoidDetail(#= PackageIssueDetailID #)'><span class='k-icon sbt-void'></span></a>");
                })
                    .Filterable(f => f.Enabled(false))
                    .Navigatable()

                    .ToolBar(toolbar =>
                    {
                        if (Model.Editable)
                        {
                            toolbar.Template(@<text>
                                <button type="button" class="k-button" onclick="GetPendingBlendingInstructionDetails()"> <img src="~/Content/Images/Mains/Size24/Actions-bookmark-add-icon-24.png" /> Xuất màng từ tồn kho </button>
                                <button type="button" class="k-button" onclick="copyRemainsToQuantity()"> <img src="~/Content/Images/Mains/Size24/Borderlands-Select-icon-24.png" /> Xuất nguyên cuộn </button>
                            </text>);
                        }
                        else
                        {
                            toolbar.Template(@<text> @Commons.Toolbars.BlankToolbar() </text>);
                        }
                    })

                    .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                    .Selectable(settings =>
                    {
                        settings.Mode(GridSelectionMode.Multiple);
                        settings.Type(GridSelectionType.Row);
                    })
                    .Events(events =>
                    {
                        events.DataBound(@<text>
                            function(e) {

                            var grid = $("#kendoGridDetails").data("kendoGrid");
                            var data = grid.dataSource.data();
                            $.each(data, function (i, row) {
                            var isWarrantyClaim = row.VoidTypeName;
                            if (isWarrantyClaim != null && isWarrantyClaim != '') {
                            $('tr[data-uid="' + row.uid + '"]').addClass("isBonus");
                            }
                            });
                            }
                        </text>);
                    }).DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(x => x.PackageIssueDetailID);
                        model.Field(m => m.PackageIssueDetailID).DefaultValue(0);
                        model.Field(m => m.PackageIssueID).DefaultValue(@Model.PackageIssueID);
                    })
                    .Events(events =>
                    {
                        events.Error("kendGrid_ErrorHandler");
                    })
                    .Aggregates(a => a.Add(x => x.CommodityCode).Count())
                    .Aggregates(a => a.Add(x => x.QuantityAvailables).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                    .Aggregates(a => a.Add(x => x.Quantity).Sum())
                )
            )
        </div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>




        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "PackageIssues")" onclick="$('#Approved').val(false);"> <img src="~/Content/Images/New/save-32-m20.png" /> Lưu </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "PackageIssues")" onclick="$('#Approved').val(true);"> <img src="~/Content/Images/New/Save-Verify-32.png" /> Lưu và duyệt </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "PackageIssues")" onclick="$('#Approved').val(true); $('#PrintAfterClosedSubmit').val(true);"> <img src="~/Content/Images/New/Print-Gray-32.png" /> Lưu, duyệt và in </button>
            }
            else
            {
                if (Model.Approved && !Model.Approvable && !Model.UnApprovable)
                {
                    <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", "PackageIssues", new {id = @Model.PackageIssueID })'"> <img src="~/Content/Images/Mains/cloud-32-NoCheck.png" /> Hủy duyệt </button>
                }
            }

            @if (Model.PackageIssueID > 0)
            {
                <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Print", "PackageIssues", new { id = @Model.PackageIssueID })'"> <img src="~/Content/Images/New/printer-cashier-32.png" /> In </button>
            }
        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")
        <div style="height:68px;"></div>
        @Html.Partial("~/Views/Helpers/Commons/_PlannedOrderLogs.cshtml")
    </div>
}


<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>

<script type="text/javascript">
    function GetPendingBlendingInstructionDetails() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("GetPendingBlendingInstructionDetails", "PackageIssues", new { area = "Inventories" })", "Xuất kho", "@Settings.PopupWidthLarge", "@Settings.PopupHeightWithTab");
        });
    }

    function callVoidDetail(packageIssueDetailID) {
        require(["kpopupWindow"], function (kpopupWindow) {
            var voidDetailWindow = new kpopupWindow();
            voidDetailWindow.openWindow($("#popupWindow"), "@Url.Action("VoidDetail", "PackageIssues")" + "/" + $("#PackageIssueID").val() + "/" + packageIssueDetailID, "Hủy/ phục hồi một phần phiếu xuất", @Settings.PopupWidthVoid,  @Settings.PopupHeightVoid);
        });
    }
</script>
