@using TotalBase.Enums;
@using TotalPortal.Configuration

@model TotalPortal.Areas.Productions.ViewModels.FinishedItemViewModel

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "MainForm" }))
{
    @Html.AntiForgeryToken()

    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTop.cshtml")
    @Html.Partial("~/Views/Helpers/Bases/_BaseSectionTopB.cshtml")

    @Html.Hidden("WarehouseTaskID", (int)@ViewBag.WarehouseTaskID);
    @Html.Hidden("WarehouseTaskIDList", (string)@ViewBag.WarehouseTaskIDList);

    @Html.HiddenFor(model => model.FinishedItemID)
    @Html.HiddenFor(model => model.TotalQuantityFailure)
    @Html.HiddenFor(model => model.TotalQuantityExcess)
    @Html.HiddenFor(model => model.TotalQuantityShortage)
    @Html.HiddenFor(model => model.TotalSwarfs)


    <div class="left-panel">

        @Html.Partial("~/Views/Helpers/Bases/_BaseSectionLeftA.cshtml")
        @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Shift.cshtml")

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate)
            <div class="div-input">
                @Html.Kendo().DateTimePickerFor(model => model.StartDate).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StopDate)
            <div class="div-input">
                @Html.Kendo().DateTimePickerFor(model => model.StopDate).HtmlAttributes(new { @class = "left-panel-input" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.StopDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ThicknessMin)
            <div class="div-input left-panel-input">
                <span style="width: 47%;float: left;">@Html.Kendo().NumericTextBoxFor(model => model.ThicknessMin).Format(@Settings.kfmQuantity).HtmlAttributes(new { @style = "width: 100%;" }) </span>
                <label style="width:6%; text-align:center; margin-top: 4px;"> / </label>
                <span style="width: 47%;float: right;">@Html.Kendo().NumericTextBoxFor(model => model.ThicknessMax).Format(@Settings.kfmQuantity).HtmlAttributes(new { @style = "width: 100%;" }) </span>
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.ThicknessMax, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.EditorFor(d => d.CrucialWorker, new { EmployeeDisplayName = @Model.GetDisplayName(m => m.CrucialWorker) })
        </div>


        @Html.HiddenFor(model => model.PlannedOrderID)
        @Html.HiddenFor(model => model.FirmOrderID)
        <div class="form-group">
            @Html.LabelFor(model => model.FirmOrderReference)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => model.FirmOrderReference).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.FirmOrderReference, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FirmOrderCode)
            <div class="div-input">
                @Html.Kendo().MaskedTextBoxFor(model => model.FirmOrderCode).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.FirmOrderCode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FirmOrderEntryDate)
            <div class="div-input">
                @Html.Kendo().DateTimePickerFor(model => model.FirmOrderEntryDate).HtmlAttributes(new { @class = "left-panel-input", @readonly = "readonly" })
            </div>
            <div class="div-validation-message">
                @Html.ValidationMessageFor(model => model.FirmOrderEntryDate, "", new { @class = "text-danger" })
            </div>
        </div>

    </div>

    <div class="right-panel">

        <div class="right-top-panel right-top-panel-H3">

            @Html.EditorFor(d => d.Customer, new { CustomerDisplayName = @Model.GetDisplayName(m => m.Customer), CustomerIcon = "Customer Red 24.png", NullCustomer = (Model.CustomerID > 0 ? null : "Lệnh sản xuất tổng hợp của nhiều khách hàng"), CustomerInfo = (Model.CustomerID > 0 ? null : "#") })


            @*<div id="show-current-PriceCategory" style="float: right; margin-top: -170px; text-align: center; width: 110px; height: 110px; " title="Kho hàng">
                    <div style="height: 90px; padding-left: 22px; padding-right: 22px; padding-top: 32px;">
                        <span style="color:blue;" id=""> </span>
                    </div>
                </div>*@
        </div>


        <div class="div-k-grid-detail">
            @(Html.Kendo().Grid(Model.FinishedItemViewDetails)
                .Name("kendoGridDetails")
                .Columns(columns =>
                {

                    columns.Bound(p => p.FinishedItemDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= FinishedItemDetailID #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].FinishedItemDetailID' value='#= FinishedItemDetailID #' />");
                    columns.Bound(p => p.FinishedItemID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= FinishedItemID #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].FinishedItemID' value='#= FinishedItemID #' />");


                    columns.Bound(p => p.FirmOrderID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (FirmOrderID == null)? '' : FirmOrderID #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].FirmOrderID' value='#= (FirmOrderID == null) ? '' : FirmOrderID #' />");
                    columns.Bound(p => p.FirmOrderDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (FirmOrderDetailID == null)? '' : FirmOrderDetailID #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].FirmOrderDetailID' value='#= (FirmOrderDetailID == null) ? '' : FirmOrderDetailID #' />");

                    columns.Bound(p => p.SemifinishedItemID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (SemifinishedItemID == null)? '' : SemifinishedItemID #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].SemifinishedItemID' value='#= (SemifinishedItemID == null) ? '' : SemifinishedItemID #' />");
                    columns.Bound(p => p.SemifinishedItemDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (SemifinishedItemDetailID == null)? '' : SemifinishedItemDetailID #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].SemifinishedItemDetailID' value='#= (SemifinishedItemDetailID == null) ? '' : SemifinishedItemDetailID #' />");

                    columns.Bound(p => p.PlannedOrderID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (PlannedOrderID == null)? '' : PlannedOrderID #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].PlannedOrderID' value='#= (PlannedOrderID == null) ? '' : PlannedOrderID #' />");
                    columns.Bound(p => p.PlannedOrderDetailID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= (PlannedOrderDetailID == null)? '' : PlannedOrderDetailID #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].PlannedOrderDetailID' value='#= (PlannedOrderDetailID == null) ? '' : PlannedOrderDetailID #' />");

                    columns.Bound(p => p.SemifinishedHandoverID).DisplayNameTitle().Hidden()
                       .ClientTemplate("#= (SemifinishedHandoverID == null)? '' : SemifinishedHandoverID #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].SemifinishedHandoverID' value='#= (SemifinishedHandoverID == null) ? '' : SemifinishedHandoverID #' />");


                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(128).EditorTemplateName("StringReadonly").Hidden()
                        .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].CommodityCode' value='#= CommodityCode #' />")
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)");
                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(150).HtmlAttributes(new { style = "" }).Hidden()
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].CommodityName' value='#= CommodityName #' />");

                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");

                    columns.Bound(p => p.PiecePerPack).DisplayNameTitle().HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Hidden()
                        .ClientTemplate("#= (PiecePerPack == null)? '' : PiecePerPack #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].PiecePerPack' value='#= (PiecePerPack == null) ? '' : PiecePerPack #' />");

                    columns.Bound(p => p.PackageUnitWeights).DisplayNameTitle().HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Hidden()
                        .ClientTemplate("#= (PackageUnitWeights == null)? '' : PackageUnitWeights #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].PackageUnitWeights' value='#= (PackageUnitWeights == null) ? '' : PackageUnitWeights #' />");

                    columns.Bound(p => p.SemifinishedItemReference).DisplayNameTitle().HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(10)
                       .ClientTemplate("#= (SemifinishedItemReference == null)? '' : SemifinishedItemReference #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].SemifinishedItemReference' value='#= (SemifinishedItemReference == null) ? '' : SemifinishedItemReference #' />");

                    columns.Bound(p => p.WorkshiftEntryDate).DisplayNameTitle().HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(25)
                        .Format("{0:" + @Settings.DateFormat + "}")
                        .ClientTemplate("#= (WorkshiftEntryDate == null)? '' : kendo.format('{0:" + @Settings.DateFormat + "}', WorkshiftEntryDate) #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].WorkshiftEntryDate' value='#= (WorkshiftEntryDate == null) ? '' : kendo.format('{0:" + @Settings.DateFormat + "}', WorkshiftEntryDate) #' />");
                    columns.Bound(p => p.WorkshiftCode).DisplayNameTitle().HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(62).Hidden()
                        .ClientTemplate("#= (WorkshiftCode == null)? '' : WorkshiftCode #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].WorkshiftCode' value='#= (WorkshiftCode == null) ? '' : WorkshiftCode #' />");


                    columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityRemains) #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].QuantityRemains' value='#= QuantityRemains #' />");

                    columns.Bound(p => p.Quantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(30)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].Quantity' value='#= Quantity #' />");
                    columns.Bound(p => p.QuantityExcess).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(25)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityExcess) #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].QuantityExcess' value='#= QuantityExcess #' />");
                    columns.Bound(p => p.QuantityShortage).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(25)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityShortage) #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].QuantityShortage' value='#= QuantityShortage #' />");

                    columns.Bound(p => p.QuantityAndExcess).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(25)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityAndExcess) #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].QuantityAndExcess' value='#= QuantityAndExcess #' />");

                    columns.Bound(p => p.QuantityFailure).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(25)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityFailure) #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].QuantityFailure' value='#= QuantityFailure #' />");

                    columns.Bound(p => p.Swarfs).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(30).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Swarfs) #" + "<input type='hidden' name='FinishedItemViewDetails[#= index(data) #].Swarfs' value='#= Swarfs #' />");

                })
                    .Filterable(f => f.Enabled(false))
                    .Navigatable()
                    .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                    .Selectable(settings =>
                    {
                        settings.Mode(GridSelectionMode.Multiple);
                        settings.Type(GridSelectionType.Row);
                    })
                    .Events(events =>
                    {
                        events.DataBound(@<text>
                            function(e) {

                            var grid = $("#kendoGridDetails").data("kendoGrid");
                            var data = grid.dataSource.data();
                            $.each(data, function (i, row) {
                            var isWarrantyClaim = row.VoidTypeName;
                            if (isWarrantyClaim != null && isWarrantyClaim != '') {
                            $('tr[data-uid="' + row.uid + '"]').addClass("isBonus");
                            }
                            });
                            }
                        </text>);
                    }).DataSource(dataSource => dataSource
    .Ajax()
    .Batch(true)
    .ServerOperation(false)
    .Model(model =>
    {
        model.Id(x => x.FinishedItemDetailID);
        model.Field(m => m.FinishedItemDetailID).DefaultValue(0);
        model.Field(m => m.FinishedItemID).DefaultValue(@Model.FinishedItemID);
    })
    .Events(events =>
    {
        //events.Change("dataSourceChange");
        events.Error("kendGrid_ErrorHandler");
    })
    .Aggregates(a => a.Add(x => x.CommodityCode).Count())
    .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
    .Aggregates(a => a.Add(x => x.Quantity).Sum())
    .Aggregates(a => a.Add(x => x.QuantityFailure).Sum())
    .Aggregates(a => a.Add(x => x.QuantityExcess).Sum())
    .Aggregates(a => a.Add(x => x.QuantityShortage).Sum())
    .Aggregates(a => a.Add(x => x.QuantityAndExcess).Sum())
    .Aggregates(a => a.Add(x => x.Swarfs).Sum())
)
            )
        </div>



        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("IntroPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Thông tin khác")
                        .Selected(true)
                        .Expanded(false)
                        .Content(@<text>
                            <div class="right-first-panel">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Description, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Description).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remarks, new { @class = "right-panel-label" })
                                    <div class="div-input">
                                        @Html.Kendo().MaskedTextBoxFor(model => model.Remarks).HtmlAttributes(new { @class = "right-panel-input" })
                                    </div>
                                    <div class="div-validation-message">
                                        @Html.ValidationMessageFor(model => model.Remarks, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="right-second-panel">
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/PreparedPerson.cshtml")
                                @Html.Partial("~/Views/Shared/EditorTemplates/DropDowns/Approver.cshtml")
                            </div>

                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>

        <div style="clear:both;"></div>

        <div class="div-k-panel">
            @(Html.Kendo().PanelBar()
                .Name("SummartyPanelBar")
                .Items(items =>
                {
                    items.Add()
                        .Text("Tổng hợp màng thành phẩm")
                        .Selected(true)
                        .Expanded(true)
                        .Content(@<text>
                            @kendoSummaryGrid()
                        </text>).HtmlAttributes(new { @class = "panel-class" });
                })
            )
        </div>

        <div class="right-botton-panel">
            @if (Model.Editable)
            {
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "FinishedItems")" onclick="$('#Approved').val(false);"> <img src="~/Content/Images/New/save-32-m20.png" /> Lưu </button>
                <button type="submit" class="k-button custom-button SubmitTypeOption-Closed" formaction="@Url.Action("Edit", "FinishedItems")" onclick="$('#Approved').val(true);"> <img src="~/Content/Images/New/Save-Verify-32.png" /> Lưu và duyệt </button>
            }
            else
            {
                if (Model.Approved && !Model.Approvable && !Model.UnApprovable)
                {
                    <button type="button" class="k-button custom-button" onclick="location.href='@Url.Action("Approve", "FinishedItems", new {id = @Model.FinishedItemID })'"> <img src="~/Content/Images/Mains/cloud-32-NoCheck.png" /> Hủy duyệt phiếu </button>
                }
            }
        </div>

        @Html.Partial("~/Views/Helpers/Bases/_BaseSubmit.cshtml")

    </div>

    @helper kendoSummaryGrid()
    {
        @(Html.Kendo().Grid(Model.FinishedItemPackages)
                .Name("kendoGridFinishedItemPackages")
                .Columns(columns =>
                {
                    columns.Bound(p => p.CommodityID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityID #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].CommodityID' value='#= CommodityID #' />");
                    columns.Bound(p => p.CommodityCode).DisplayNameTitle().Width(310).EditorTemplateName("StringReadonly")
                        .ClientTemplate("#= CommodityCode #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].CommodityCode' value='#= CommodityCode #' />")
                        .ClientFooterTemplate("TC (#= kendo.format('{0:n0}', count) # dòng)");
                    columns.Bound(p => p.CommodityName).DisplayNameTitle().Width(160).HtmlAttributes(new { style = "" }).Hidden()
                        .ClientTemplate("#= CommodityName #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].CommodityName' value='#= CommodityName #' />");
                    columns.Bound(p => p.CommodityTypeID).DisplayNameTitle().Hidden()
                        .ClientTemplate("#= CommodityTypeID #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].CommodityTypeID' value='#= CommodityTypeID #' />");


                    columns.Bound(p => p.QuantityRemains).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" })
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityRemains) #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].QuantityRemains' value='#= QuantityRemains #' />");

                    columns.Bound(p => p.Quantity).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(20)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Quantity) #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].Quantity' value='#= Quantity #' />");

                    columns.Bound(p => p.PiecePerPack).DisplayNameTitle().HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(50).Hidden()
                        .ClientTemplate("#= (PiecePerPack == null)? '' : PiecePerPack #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].PiecePerPack' value='#= (PiecePerPack == null) ? '' : PiecePerPack #' />");

                    columns.Bound(p => p.PackageUnitWeights).DisplayNameTitle().Width(20).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmWeight)
                        .ClientTemplate("#= kendo.format('" + Settings.kfmWeight + "', PackageUnitWeights) #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].PackageUnitWeights' value='#= PackageUnitWeights #' />");

                    columns.Bound(p => p.Packages).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmN0)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmN0 + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmN0 + "', Packages) #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].Packages' value='#= Packages #' />");
                    columns.Bound(p => p.OddPackages).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmN0)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmN0 + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmN0 + "', OddPackages) #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].OddPackages' value='#= OddPackages #' />");

                    columns.Bound(p => p.QuantityWeights).DisplayNameTitle().Width(30).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityWeights) #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].QuantityWeights' value='#= QuantityWeights #' />");

                    columns.Bound(p => p.QuantityFailure).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(20)
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityFailure) #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].QuantityFailure' value='#= QuantityFailure #' />");
                    columns.Bound(p => p.QuantityFailureWeights).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(30).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityFailureWeights) #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].QuantityFailureWeights' value='#= QuantityFailureWeights #' />");

                    columns.Bound(p => p.QuantityExcess).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(20).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityExcess) #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].QuantityExcess' value='#= QuantityExcess #' />");
                    columns.Bound(p => p.QuantityExcessWeights).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(30).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityExcessWeights) #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].QuantityExcessWeights' value='#= QuantityExcessWeights #' />");

                    columns.Bound(p => p.QuantityShortage).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(20).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityShortage) #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].QuantityShortage' value='#= QuantityShortage #' />");
                    columns.Bound(p => p.QuantityShortageWeights).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(30).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', QuantityShortageWeights) #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].QuantityShortageWeights' value='#= QuantityShortageWeights #' />");


                    columns.Bound(p => p.Swarfs).DisplayNameTitle().HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right" }).Width(30).Hidden()
                        .Format(Settings.kfmQuantity)
                        .ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #")
                        .ClientTemplate("#= kendo.format('" + Settings.kfmQuantity + "', Swarfs) #" + "<input type='hidden' name='FinishedItemPackages[#= newIndex(data) #].Swarfs' value='#= Swarfs #' />");

                })
                .Navigatable()
                .Filterable(f => f.Enabled(false))
                .Editable(editable => { editable.Enabled(Model.Editable); editable.Mode(GridEditMode.InCell).DisplayDeleteConfirmation(true).CreateAt(GridInsertRowPosition.Bottom); })
                .Selectable(settings =>
                {
                    settings.Mode(GridSelectionMode.Multiple);
                    settings.Type(GridSelectionType.Row);
                })
                .DataSource(dataSource => dataSource
                    .Ajax()
                    .Batch(true)
                    .ServerOperation(false)
                    .Model(model =>
                    {
                        model.Id(x => x.CommodityID);
                        model.Field(m => m.CommodityID).DefaultValue(0);
                    })
                    .Events(events =>
                        {
                            events.Change("dataSourceSummaryChange");
                            events.Error("kendGrid_ErrorHandler");
                        })
                    .Aggregates(a => a.Add(x => x.CommodityCode).Count())
                    .Aggregates(a => a.Add(x => x.QuantityRemains).Sum())
                    .Aggregates(a => a.Add(x => x.Quantity).Sum())
                    .Aggregates(a => a.Add(x => x.Packages).Sum())
                    .Aggregates(a => a.Add(x => x.OddPackages).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityWeights).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityFailure).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityFailureWeights).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityExcess).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityExcessWeights).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityShortage).Sum())
                    .Aggregates(a => a.Add(x => x.QuantityShortageWeights).Sum())
                    .Aggregates(a => a.Add(x => x.Swarfs).Sum())
                )
        )
    }

}

<script src="@Url.Content("~/Scripts/Helpers/KendoGrid/gridHelper.js")"></script>

<script type="text/javascript">
    $("#TotalQuantity").change(function (e) { updateFinishedItemPackages(); })
    $("#TotalQuantityFailure").change(function (e) { updateFinishedItemPackages(); })
    $("#TotalQuantityExcess").change(function (e) { updateFinishedItemPackages(); })
    $("#TotalQuantityShortage").change(function (e) { updateFinishedItemPackages(); })
    $("#TotalSwarfs").change(function (e) { updateFinishedItemPackages(); })

    function updateFinishedItemPackages() { //Define function to be called by action some button
        var kenGrid = $("#kendoGridDetails").data("kendoGrid");
        var kenGridSummaries = $("#kendoGridFinishedItemPackages").data("kendoGrid");
        kenGridSummaries.bind("dataBinding", function (e) { e.preventDefault(); }); //You can prevent the data bind action at the dataBinding event, when updating multiple model properties

        var detailDataRows = kenGrid.dataSource.data();
        var summaryDataRows = kenGridSummaries.dataSource.data();
        for (var i = 0; i < summaryDataRows.length; i++) {
            var summaryDataItem = summaryDataRows[i];

            var commodityID = summaryDataItem["CommodityID"];
            var quantity = 0; var quantityFailure = 0; var quantityExcess = 0; var quantityShortage = 0; var swarfs = 0;

            detailDataRows.forEach(function (detailDataItem) {
                if (detailDataItem["CommodityID"] === commodityID) {
                    quantity = quantity + detailDataItem["Quantity"] + detailDataItem["QuantityExcess"];
                    quantityFailure = quantityFailure + detailDataItem["QuantityFailure"];
                    quantityExcess = quantityExcess + detailDataItem["QuantityExcess"];
                    quantityShortage = quantityShortage + detailDataItem["QuantityShortage"];
                    swarfs = swarfs + detailDataItem["Swarfs"];
                }
            })

            summaryDataItem.set("Quantity", DoRound(quantity, requireConfig.websiteOptions.rndQuantity));
            summaryDataItem.set("QuantityFailure", DoRound(quantityFailure, requireConfig.websiteOptions.rndQuantity));
            summaryDataItem.set("QuantityExcess", DoRound(quantityExcess, requireConfig.websiteOptions.rndQuantity));
            summaryDataItem.set("QuantityShortage", DoRound(quantityShortage, requireConfig.websiteOptions.rndQuantity));
            summaryDataItem.set("Swarfs", DoRound(swarfs, requireConfig.websiteOptions.rndQuantity));

            summaryDataItem.set("Packages", summaryDataItem["PiecePerPack"] * 1 > 0 ? Math.trunc(DoRound(quantity / summaryDataItem["PiecePerPack"], requireConfig.websiteOptions.rndQuantity)) : 0);
            summaryDataItem.set("OddPackages", summaryDataItem["PiecePerPack"] * 1 > 0 ? DoRound(quantity % summaryDataItem["PiecePerPack"], requireConfig.websiteOptions.rndQuantity) : 0);

            summaryDataItem.set("QuantityWeights", summaryDataItem["PiecePerPack"] * 1 > 0 ? DoRound(quantity * summaryDataItem["PackageUnitWeights"] / summaryDataItem["PiecePerPack"], requireConfig.websiteOptions.rndWeight) : 0);
            summaryDataItem.set("QuantityFailureWeights", summaryDataItem["PiecePerPack"] * 1 > 0 ? DoRound(quantityFailure * summaryDataItem["PackageUnitWeights"] / summaryDataItem["PiecePerPack"], requireConfig.websiteOptions.rndWeight) : 0);
            summaryDataItem.set("QuantityExcessWeights", summaryDataItem["PiecePerPack"] * 1 > 0 ? DoRound(quantityExcess * summaryDataItem["PackageUnitWeights"] / summaryDataItem["PiecePerPack"], requireConfig.websiteOptions.rndWeight) : 0);
            summaryDataItem.set("QuantityShortageWeights", summaryDataItem["PiecePerPack"] * 1 > 0 ? DoRound(quantityShortage * summaryDataItem["PackageUnitWeights"] / summaryDataItem["PiecePerPack"], requireConfig.websiteOptions.rndWeight) : 0);
        }

        kenGridSummaries.unbind("dataBinding"); //When finish modifying the data, unbind dataBinding event
        kenGridSummaries.refresh(); //Then, finally, refresh grid
    }

    dataSourceChange = function (e) {

        if (confirm("Vui lòng nhấn OK để phần mềm tự tính số lượng khay hư hoặc khay thành phẩm.")) {
            var dataRow = e.items[0];

            if (e.field === "Quantity") {
                if (dataRow.Quantity <= dataRow.QuantityRemains) {
                    dataRow.set("QuantityFailure", DoRound(dataRow.QuantityRemains - dataRow.Quantity, requireConfig.websiteOptions.rndQuantity));
                }
                else {
                    dataRow.set("Quantity", dataRow.QuantityRemains);
                    dataRow.set("QuantityFailure", 0);
                }
            }

            if (e.field === "QuantityFailure") {
                if (dataRow.QuantityFailure <= dataRow.QuantityRemains) {
                    dataRow.set("Quantity", DoRound(dataRow.QuantityRemains - dataRow.QuantityFailure, requireConfig.websiteOptions.rndQuantity));
                }
                else {
                    dataRow.set("Quantity", 0);
                    dataRow.set("QuantityFailure", dataRow.QuantityRemains);
                }
            }
        }
    }

    dataSourceSummaryChange = function (e) {
        var dataRow = e.items[0];
        if (e.field === "PiecePerPack" || e.field === "PackageUnitWeights") {

            var kenGrid = $("#kendoGridDetails").data("kendoGrid");
            var detailDataRows = kenGrid.dataSource.data();

            for (var i = 0; i < detailDataRows.length; i++) {
                var detailDataItem = detailDataRows[i];
                if (detailDataItem["CommodityID"] === dataRow["CommodityID"]) {
                    if (e.field === "PiecePerPack")
                        detailDataItem.set("PiecePerPack", dataRow["PiecePerPack"]);
                    if (e.field === "PackageUnitWeights")
                        detailDataItem.set("PackageUnitWeights", dataRow["PackageUnitWeights"]);
                }
            }

            updateFinishedItemPackages();
        }
    }



    function newIndex(dataItem) {
        var data = $("#kendoGridFinishedItemPackages").data("kendoGrid").dataSource.data();
        return data.indexOf(dataItem);
    }

</script>
