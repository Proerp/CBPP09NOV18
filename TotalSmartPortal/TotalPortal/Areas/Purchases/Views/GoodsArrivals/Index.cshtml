@using TotalPortal.Configuration

@model TotalPortal.Areas.Purchases.ViewModels.GoodsArrivalViewModel

<div id="popupWindow"></div>

<div>
    @(Html.Kendo().Grid<TotalModel.Models.GoodsArrivalIndex>()
            .Name("kendoGridIndex")
            .Columns(columns =>
            {
                columns.Bound(p => p.GoodsArrivalID).DisplayNameTitle().Hidden();                
                columns.Bound(p => p.EntryDate).Title("Ngày").Format("{0:dd/MM/yyyy}").Width(90);

                columns.Bound(p => p.Reference).Title("#").Width(10).HtmlAttributes(new { @class = "index-nav-column" }).ClientTemplate("<a href='" + Url.RouteUrl("Default", new { controller = "Purchases/GoodsArrivals", action = "Edit" }) + "/#= GoodsArrivalID #'>#=Reference#</a>");
                columns.Bound(p => p.Code).Title("Số ĐH").Width(20);
                columns.Bound(p => p.CustomerName).Title("Khách hàng").Width(190);
                columns.Bound(p => p.Description).Title("Diễn giải").Width(130);

                columns.Bound(p => p.TotalQuantity).Title("Đặt hàng").Format(Settings.kfmQuantity).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(60).ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });
                columns.Bound(p => p.TotalQuantityReceipted).Title("Xuất kho").Format(Settings.kfmQuantity).HtmlAttributes(new { @class = "grid-number-column" }).HeaderHtmlAttributes(new { @style = "text-align: right"}).Width(60).ClientFooterTemplate("#= kendo.format('" + Settings.kfmQuantity + "', sum) #").FooterHtmlAttributes(new { @class = "grid-number-column" });

                columns.Template(t => { }).Title("!").ClientTemplate("<input class='IsSelected' #= Approved ? '':checked='checked' #  type='checkbox' disabled='disabled'/>").HtmlAttributes(new { @class = "grid-column-center" }).HeaderHtmlAttributes(new { @style = "text-align: center" }).Width(3);
                
                columns.Template(model => null).HtmlAttributes(new { @class = "grid-column-center" }).Width(92)
                    .ClientTemplate("<a class='k-button' style='padding-left:0px; padding-right:0px' href='" + Url.RouteUrl("Default", new { controller = "Purchases/GoodsArrivals", action = "Print" }) + "/#= GoodsArrivalID #'><span class='k-icon sbt-printer'></span></a>  <a class='k-button' style='padding-left:0px; padding-right:0px' href='" + Url.RouteUrl("Default", new { controller = "Purchases/GoodsArrivals", action = "Delete" }) + "/#= GoodsArrivalID #'><span class='k-icon sbt-delete'></span></a>");
            })
            .ToolBar(toolbar =>
            {
                toolbar.Template(@<text> 
                    <button type="button" class="k-button" onclick="createWizard()"> <img src="~/Content/Images/Mains/Size24/folder-documents-icon-24.png" /> Lập phiếu nhập hàng </button> 
                    <div class="toolbar" style="float: right;">
                        <label>Nhập số phiếu, hóa đơn hoặc NCC</label>
                        <input id="indexFilterText" class="k-textbox" style="text-align: center; " onkeyup="indexFilterText_KeyUp()" />
                        
                        
                        @*<div style="text-align: right; margin-top: 4px;">*@
                        
                            <span id="filterExtended">
                                @Html.Kendo().DatePicker().Name("ExtendedFromDate").Value(Model.GlobalFromDate).Events(e => e.Change("indexFilterText_KeyUp")).HtmlAttributes(new { @class = "input-class", style = "text-align: center; width:118px" }) 
                                @Html.Kendo().DatePicker().Name("ExtendedToDate").Value(Model.GlobalToDate).Events(e => e.Change("indexFilterText_KeyUp")).HtmlAttributes(new { @class = "input-class", style = "text-align: center; width:118px" }) 

                                @(Html.Kendo().DropDownList()
                                    .Name("ShowPendingOnly")
                                    .DataTextField("Text")
                                    .DataValueField("Value")
                                    .HtmlAttributes(new { @style = "width: 198px; text-align: center; " })
                                    .BindTo(new List<SelectListItem>()
                                      {
                                            new SelectListItem { Text = "[Tất cả]", Value = "0"},
                                            new SelectListItem { Text = "Hàng nhập chưa nhập kho", Value = "1"},
                                      })
                                    .Events(e => e.Change("indexFilterText_KeyUp"))
                                    //.HtmlAttributes(new { @style = "padding-right: 13px;" })
                                )
                            </span>


                        @*</div>*@



                    </div>
                </text>);
            })
            .Filterable(f => f.Enabled(false))
            .Pageable()
            .Groupable(g => g.Messages(messages => messages.Empty("Phân nhóm dữ liệu: Kéo và thả tiêu đề một hoặc nhiều cột dữ liệu ngay bên dưới vào đây để phân nhóm hiển thị theo phân cấp của các cột dữ liệu")))            
            .Selectable()
            .Sortable()
            .Events(e =>
            {
                e.DataBound("hightLightSelectedRow");
            })
            .DataSource(dataSource => dataSource
                .Ajax()
                .Read(read => read.Action("GetGoodsArrivalIndexes", "GoodsArrivalAPIs", new { area = "Purchases" }).Data("onGetGoodsArrivalIndexes"))
                .Sort(sort =>
                    {
                        sort.Add(p => p.EntryDate).Descending();
                        sort.Add(p => p.GoodsArrivalID).Descending();
                    })
                .PageSize(20)
                .Model(model =>
                {
                    model.Id(x => x.GoodsArrivalID);
                    model.Field(m => m.GoodsArrivalID).DefaultValue(0);
                })
                .ServerOperation(true)
                .Aggregates(a => a.Add(x => x.TotalQuantity).Sum())
                .Aggregates(a => a.Add(x => x.TotalQuantityReceipted).Sum())
                )
            .HtmlAttributes(new { @class = "grid-class" }))
</div>



<script type="text/javascript">

    function onGetGoodsArrivalIndexes(e) {
        var indexFilterText = $("#indexFilterText").val();
        return {
            withExtendedSearch: indexFilterText && indexFilterText.length >= "@Settings.AutoCompleteMinLenght" ? true : false,
            extendedFromDate: $("#ExtendedFromDate").val(),
            extendedToDate: $("#ExtendedToDate").val(),
            pendingOnly: $("#ShowPendingOnly").val() === "0" ? false : true
        };
    }

    function hightLightSelectedRow(e) {
        require(["kindexGrid"], function (kindexGrid) {
            var kindexGridInstance = new kindexGrid("kendoGridIndex");
            kindexGridInstance.setSelectedRow("GoodsArrivalID", '@ViewBag.SelectedEntityID');
        });
    }

    function createWizard() {
        require(["kpopupWindow"], function (kpopupWindow) {
            var createWizardWindow = new kpopupWindow();
            createWizardWindow.openWindow($("#popupWindow"), "@Url.Action("CreateWizard", "GoodsArrivals")", "Chọn phiếu đặt hàng", "@Settings.PopupWidthSmall", "@Settings.PopupHeightMedium");
        });
    }


    decoratingKindex = function (idx, elem) {

        var isWarrantyClaim = elem.InActive;
        if (isWarrantyClaim != null && isWarrantyClaim == true) {
            $('tr[data-uid="' + elem.uid + '"]').addClass("isBonus");
        }

        isWarrantyClaim = elem.InActivePartial;
        if (isWarrantyClaim != null && isWarrantyClaim == true) {
            $('tr[data-uid="' + elem.uid + '"]').addClass("isBonus1");
        }
    }






    function indexFilterText_KeyUp() {
        var indexFilterText = $("#indexFilterText").val(), gridDetails = $("#kendoGridIndex").data("kendoGrid");

        if ((indexFilterText && indexFilterText.length >= "@Settings.AutoCompleteMinLenght") || $("#ShowPendingOnly").val() != "0") {
            gridDetails.dataSource.filter({
                logic: "or",
                filters: [
                    { field: "Reference", operator: "contains", value: indexFilterText },
                    { field: "Code", operator: "contains", value: indexFilterText },
                    { field: "CustomerName", operator: "contains", value: indexFilterText }
                ]
            });


        } else {
            if (gridDetails.dataSource.filter() != undefined)
                gridDetails.dataSource.filter({});
        }
    }

</script>



